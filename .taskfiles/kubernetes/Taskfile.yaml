---
version: '3'

vars:
  KUBERNETES_RESOURCES_DIR: "{{.ROOT_DIR}}/.taskfiles/kubernetes/resources"

tasks:

  browse-pvc:
    desc: Mount a PVC to an temp container [NS={{.NS}}] [CLAIM=required]
    interactive: true
    cmd: kubectl browse-pvc --namespace {{.NS}} --image docker.io/library/alpine:latest {{.CLAIM}}
    vars:
      NS: '{{.NS | default "default"}}'
    requires:
      vars: [CLAIM]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}
      - kubectl browse-pvc --version
      - which kubectl

  node-shell:
    desc: Open a shell to a node [NS={{.NS}}] [NODE=required]
    interactive: true
    cmd: kubectl debug -n {{.NS}} -it --image alpine node/{{.NODE}}
    vars:
      NS: '{{.NS | default "kube-system"}}'
    requires:
      vars: [NODE]
    preconditions:
      - kubectl get nodes {{.NODE}}
      - which kubectl

  sync-secrets:
    desc: Sync all ExternalSecrets
    cmds:
      - for: { var: SECRETS, split: "\n" }
        cmd: kubectl --namespace {{splitList "," .ITEM | first}} annotate externalsecret {{splitList "," .ITEM | last}} force-sync="{{now | unixEpoch}}" --overwrite
    vars:
      SECRETS:
        sh: kubectl get externalsecret --all-namespaces --no-headers --output=jsonpath='{range .items[*]}{.metadata.namespace},{.metadata.name}{"\n"}{end}'
    preconditions:
      - which kubectl

  cleanse-pods:
    desc: Cleanse pods with a Failed/Pending/Succeeded phase
    cmds:
      - for:
          matrix:
            PHASE: [Failed, Pending, Succeeded]
        cmd: kubectl delete pods --all-namespaces --field-selector status.phase={{.ITEM.PHASE}} --ignore-not-found=true
    preconditions:
      - which kubectl

  privileged-pvc:
    desc: Run a privileged pod and mount a PVC [NS={{.NS}}] [CLAIM=required] [NODE=required]
    cmd:
      kubectl run privileged-{{.NODE}} -n {{.NS}} -i --rm --image=docker.io/library/alpine:latest --overrides="$(yq {{.KUBERNETES_RESOURCES_DIR}}/privileged-pod-pvc.tmpl.yaml -o=json | envsubst -no-unset -no-empty)"
    env:
      NS: '{{.NS}}'
      CLAIM: '{{.CLAIM}}'
      NODE: '{{.NODE}}'
    vars:
      NS: '{{.NS | default "default"}}'
      TMPDIR:
        sh: mktemp -d
    requires:
      vars: [CLAIM, NODE]
    preconditions:
      - kubectl --namespace {{.NS}} get persistentvolumeclaims {{.CLAIM}}
      - test -f {{.KUBERNETES_RESOURCES_DIR}}/privileged-pod-pvc.tmpl.yaml
      - which envsubst
      - which kubectl
